[
	{
		"name": "VERSION 0.9",
		"date": "JUNE 12, 2015",
		"summary": [
			"Icon support",
			"Web item preloading (Android)",
			"Behaviour map support",
			"Debug mode"
		],
		"items": [
			{
				"icon": "glyphicon-picture",
				"name": "Icon support",
				"description": "A page can have a set of icons defined via CXP Manager (or in the model) that can be used by the (app) template to add an icon to a tab bar item or drawer menu list item. Currently normal, active, disabled and pressed icons are supported."
			},
			{
				"icon": "glyphicon-random",
				"name": "Web item preloading",
				"description": "Preloading is the method of loading an item into memory as soon as the model is downloaded. This means that when the item, which can be a page, container or widget, will be rendered instantly when needed by the app. It often is used together with web item retaining and can be used to delay the disappearance of a splash screen in order to make sure the UI is fully loaded before actually showing it. This functionality is now available for iOS and Android (4.4 and higher)."
			},
			{
				"icon": "glyphicon-indent-left",
				"name": "Behaviour map support",
				"description": "The navigation flow informer now accepts behaviour mapping that can be used to instruct the (app) template to navigate between functionality by using the pub/sub mechanism. This improves the level of independence between widgets and improves Launchpad support."
			},
			{
				"icon": "glyphicon-cog",
				"name": "Debug mode",
				"description": "Debug mode can be enabled via the configuration file and provides access to various (future) debug and development tools. Currently this includes the ability to long-press the widget to reload it without removing the reference to the native web view. This enables widget developers to more easily debug JavaScript errors occuring during the initialisation phase of a widget."
			}
		]
	},
	{
		"name": "VERSION 0.8",
		"date": "MAY 29, 2015",
		"summary": [
			"Web item retaining",
			"Web item preloading (iOS only)",
			"Renderable item's children and preferences accessibility"
		],
		"items": [
			{
				"icon": "glyphicon-retweet",
				"name": "Web item retaining",
				"description": "Retaining is similar to lazy loading. Items are loaded and then saved to memory, so every subsequent call will render the item immediately. It often is used together with web item preloading."
			},
			{
				"icon": "glyphicon-random",
				"name": "Web item preloading",
				"description": "Preloading is the method of loading an item into memory as soon as the model is downloaded. This means that when the item, which can be a page, container or widget, will be rendered instantly when needed by the app. It often is used together with web item retaining and can be used to delay the disappearance of a splash screen in order to make sure the UI is fully loaded before actually showing it. This functionality is currently only available for iOS."
			},
			{
				"icon": "glyphicon-list-alt",
				"name": "Children and preferences accessibility",
				"description": "A renderable item (e.g. page or widget) now exposes information about it's children and preferences."
			}
		]
	},
	{
		"name": "VERSION 0.7",
		"date": "MAY 15, 2015",
		"summary": [
			"Model parsing and caching",
			"Web item rendering",
			"Widget features",
			"Pub/sub support",
			"Navigation flow informer"
		],
		"items": [
			{
				"icon": "glyphicon-list-alt",
				"name": "Model parsing and caching",
				"description": "The model provides the app with information about what content and functionality should be presented. It is also used to store preferences and any other information that is necessary for the app to function, for example, the navigation structure."
			},
			{
				"icon": "glyphicon-th-large",
				"name": "Web item rendering",
				"description": "Web items are a collection of renderable web-based items built using client-side web technologies such as HTML, JavaScript and CSS. In CXP Mobile, these are Widgets and Layouts. The library loads these web items in a native web view component."
			},
			{
				"icon": "glyphicon-asterisk",
				"name": "Widget features",
				"description": "A widget feature is used to extend the functionality of a widget using native componenets. A common use for this will be to access native 3rd party API's, for instance, to access the Camera or GPS functionality of the mobile device. Widget features are implemented on the template level and are usually written in Swift or Objective-C for iOS and Java for Android."
			},
			{
				"icon": "glyphicon-resize-full",
				"name": "Pub/sub support",
				"description": "The Publish and Subscribe pattern, often referred to simply as Pub/Sub is used to pass information between widgets. In simple terms the publishing widget will send out a message which is then picked up by any other widget which is subscribed to it. The Backbase CXP Mobile SDK supports pub/sub notifications. This includes traditional pub/sub notifications between widgets but it also extends to native components."
			},
			{
				"icon": "glyphicon-share-alt",
				"name": "Navigation flow informer",
				"description": "Navigating between (native) pages is done by the navigation flow informer. It intercepts navigation requests and understands how to mape these requests to native transistions based on the model received from the mBaaS. Various navigation flow events are supported."
			}
		]
	}
]